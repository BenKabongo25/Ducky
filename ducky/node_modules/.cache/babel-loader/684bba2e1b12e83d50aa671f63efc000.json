{"ast":null,"code":"import _classCallCheck from \"/home/labicquette/L3/techWeb/Ducky/ducky/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/labicquette/L3/techWeb/Ducky/ducky/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/labicquette/L3/techWeb/Ducky/ducky/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/labicquette/L3/techWeb/Ducky/ducky/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/labicquette/L3/techWeb/Ducky/ducky/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/labicquette/L3/techWeb/Ducky/ducky/src/view/components/posts/PostView.js\";\nimport React from \"react\";\nimport { formatISODate } from \"../../../model/utils\";\nimport { UserProfilPreview } from \"../users/UserProfilPreview\";\nexport var PostView =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PostView, _React$Component);\n\n  function PostView(props) {\n    var _this;\n\n    _classCallCheck(this, PostView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PostView).call(this, props));\n    _this.state = {\n      like: _this.props.like\n    };\n    return _this;\n  }\n\n  _createClass(PostView, [{\n    key: \"render\",\n    value: function render() {\n      var postPrologueContent = null;\n\n      if (this.props.post.prologue) {\n        postPrologueContent = React.createElement(\"div\", {\n          className: \"post-view-prologue\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"post-view-prologue-username\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }, this.props.post.prologue.user.names, this.props.post.prologue.comment));\n      }\n\n      var postLocationContent = null;\n\n      if (this.props.post.location) {\n        postLocationContent = React.createElement(\"div\", {\n          className: \"post-view-content-content-post-infos-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }, this.props.post.location + ' · '));\n      }\n\n      var postAudienceContent = React.createElement(\"div\", {\n        className: \"post-view-content-content-post-infos-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, (this.props.post.private ? 'Privé' : 'Public') + ' · '));\n      var time = formatISODate(new Date(this.props.post.time));\n      var postTimeContent = React.createElement(\"div\", {\n        className: \"post-view-content-content-post-infos-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, time));\n      var postTextContent = React.createElement(\"div\", {\n        className: \"post-view-content-content-body-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, this.props.post.text));\n      var postPollContent = null;\n\n      if (this.props.post.polls.length > 0) {\n        postPollContent = React.createElement(\"div\", {\n          className: \"post-view-content-content-body-poll-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        });\n      }\n\n      var postMediaContent = null;\n\n      if (this.props.post.media.length > 0) {\n        postMediaContent = React.createElement(\"div\", {\n          className: \"post-view-content-content-body-media-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        });\n      }\n\n      var postReplyToContent = null;\n      var actionsBarContent = null;\n      var replyContent = null;\n\n      if (!this.props.isReply) {\n        if (this.props.post.reply_to) {\n          postReplyToContent = React.createElement(\"div\", {\n            className: \"post-view-content-content-body-post-replyto-container\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 82\n            },\n            __self: this\n          }, React.createElement(PostView, {\n            post: this.props.post.reply_to,\n            isReply: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 83\n            },\n            __self: this\n          }));\n        }\n\n        actionsBarContent = React.createElement(\"div\", {\n          className: \"post-view-actions-bar\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"post-view-action-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: 'post-view-action-image-container ' + 'post-view-action-image-container-red',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          className: \"post-view-action-item-image\",\n          type: \"image\",\n          alt: \"Liker\",\n          title: \"Liker\",\n          src: require('../../../ressources/icons/like_red.png'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        })), React.createElement(\"span\", {\n          className: \"post-view-action-item-name\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, this.props.post.likes.length)), React.createElement(\"div\", {\n          className: \"post-view-action-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: 'post-view-action-image-container ' + 'post-view-action-image-container-blue',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          className: \"post-view-action-item-image\",\n          type: \"image\",\n          alt: \"R\\xE9pondre\",\n          title: \"R\\xE9pondre\",\n          src: require('../../../ressources/icons/comment.png'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        })), React.createElement(\"span\", {\n          className: \"post-view-action-item-name\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, this.props.post.replies.length)), React.createElement(\"div\", {\n          className: \"post-view-action-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: 'post-view-action-image-container ' + 'post-view-action-image-container-green',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          className: \"post-view-action-item-image\",\n          type: \"image\",\n          alt: \"Partager\",\n          title: \"Partager\",\n          src: require('../../../ressources/icons/share.png'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        })), React.createElement(\"span\", {\n          className: \"post-view-action-item-name\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, this.props.post.shares.length)));\n        replyContent = React.createElement(\"div\", {\n          className: \"post-view-reply-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        });\n      }\n\n      var userProfilPreviewContent = React.createElement(\"div\", {\n        className: \"post-view-user-profil-preview\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(UserProfilPreview, {\n        user: this.props.post.user,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }));\n      return React.createElement(\"div\", {\n        className: !this.props.isReply ? 'post-view-container' : 'post-view-reply-container',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, postPrologueContent, React.createElement(\"div\", {\n        className: \"post-view-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"post-view-content-user-profile-picture\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: this.props.post.user.profil_picture_src,\n        alt: this.props.post.user.names,\n        className: \"post-view-content-user-profile-picture-image\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }), userProfilPreviewContent), React.createElement(\"div\", {\n        className: \"post-view-content-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"post-view-content-content-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"post-view-content-content-header-user-infos\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"post-view-content-content-header-user-infos-names\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, this.props.post.user.names), React.createElement(\"div\", {\n        className: \"post-view-content-content-header-user-infos-username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, '@' + this.props.post.user.username, userProfilPreviewContent)), userProfilPreviewContent, React.createElement(\"div\", {\n        className: \"post-view-content-content-header-post-infos\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, postLocationContent, postAudienceContent, postTimeContent)), React.createElement(\"div\", {\n        className: \"post-view-content-content-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, postTextContent, postPollContent, postMediaContent, postReplyToContent, actionsBarContent))), replyContent);\n    }\n  }]);\n\n  return PostView;\n}(React.Component);","map":{"version":3,"sources":["/home/labicquette/L3/techWeb/Ducky/ducky/src/view/components/posts/PostView.js"],"names":["React","formatISODate","UserProfilPreview","PostView","props","state","like","postPrologueContent","post","prologue","user","names","comment","postLocationContent","location","postAudienceContent","private","time","Date","postTimeContent","postTextContent","text","postPollContent","polls","length","postMediaContent","media","postReplyToContent","actionsBarContent","replyContent","isReply","reply_to","require","likes","replies","shares","userProfilPreviewContent","profil_picture_src","username","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { formatISODate } from \"../../../model/utils\";\nimport { UserProfilPreview } from \"../users/UserProfilPreview\";\n\nexport class PostView extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            like: this.props.like\n        }\n    }\n\n    render() {\n        let postPrologueContent = null;\n        if (this.props.post.prologue) {\n            postPrologueContent = (\n                <div className='post-view-prologue'>\n                    <span className='post-view-prologue-username'>\n                        {this.props.post.prologue.user.names}\n                        {this.props.post.prologue.comment}\n                    </span>\n                </div>\n            );\n        }\n\n        let postLocationContent = null;\n        if (this.props.post.location) {\n            postLocationContent = (\n                <div className='post-view-content-content-post-infos-item'>\n                    <span>{this.props.post.location + ' · '}</span>\n                </div>\n            );\n        }\n\n        let postAudienceContent = (\n            <div className='post-view-content-content-post-infos-item'>\n                <span>{(this.props.post.private ? 'Privé' : 'Public') + ' · '}</span>\n            </div>\n        );\n        \n        let time = formatISODate(new Date(this.props.post.time));\n        let postTimeContent = (\n            <div className='post-view-content-content-post-infos-item'>\n                <span>{time}</span>\n            </div>\n        );\n\n        let postTextContent = (\n            <div className='post-view-content-content-body-text'>\n                <p>{this.props.post.text}</p>\n            </div>\n        );\n\n        let postPollContent = null;\n        if (this.props.post.polls.length > 0) {\n            postPollContent =(\n                <div className='post-view-content-content-body-poll-container'>\n\n                </div>\n            );\n        }\n\n        let postMediaContent = null;\n        if (this.props.post.media.length > 0) {\n            postMediaContent = (\n                <div className='post-view-content-content-body-media-container'>\n\n                </div>\n            );\n        }\n    \n        let postReplyToContent = null;\n        let actionsBarContent = null;\n        let replyContent = null;\n\n        if (!this.props.isReply) {\n\n            if (this.props.post.reply_to) {\n                postReplyToContent = (\n                    <div className='post-view-content-content-body-post-replyto-container'>        \n                        <PostView post={this.props.post.reply_to} isReply={true}/>\n                    </div>\n                );\n            }\n\n            actionsBarContent = (\n                <div className='post-view-actions-bar'>\n                    <div className='post-view-action-item'>\n                        <div className={\n                            'post-view-action-image-container ' +\n                            'post-view-action-image-container-red'\n                            }>\n                            <input\n                                className='post-view-action-item-image'\n                                type='image'\n                                alt='Liker'\n                                title='Liker'\n                                src={require('../../../ressources/icons/like_red.png')} />\n                        </div>\n                        <span className='post-view-action-item-name'>\n                            {this.props.post.likes.length}\n                        </span>\n                    </div>\n\n                    <div className='post-view-action-item'>\n                        <div className={\n                            'post-view-action-image-container ' +\n                            'post-view-action-image-container-blue'\n                            }>\n                            <input\n                                className='post-view-action-item-image'\n                                type='image'\n                                alt='Répondre'\n                                title='Répondre'\n                                src={require('../../../ressources/icons/comment.png')} />\n                        </div>\n                        <span className='post-view-action-item-name'>\n                            {this.props.post.replies.length}\n                        </span>\n                    </div>      \n\n                    <div className='post-view-action-item'>\n                        <div className={\n                            'post-view-action-image-container ' +\n                            'post-view-action-image-container-green'\n                            }>\n                            <input\n                                className='post-view-action-item-image'\n                                type='image'\n                                alt='Partager'\n                                title='Partager'\n                                src={require('../../../ressources/icons/share.png')} />\n                        </div>\n                        <span className='post-view-action-item-name'>\n                            {this.props.post.shares.length}\n                        </span>\n                    </div>      \n\n                </div>\n            );\n\n            replyContent = (\n                <div className='post-view-reply-container'>\n\n                </div>\n            );\n\n        }\n\n        let userProfilPreviewContent = (\n            <div className='post-view-user-profil-preview'>\n                <UserProfilPreview user={this.props.post.user} />\n            </div>\n        );\n\n        return (\n            <div className={\n                    (!this.props.isReply) ? \n                        'post-view-container' : \n                        'post-view-reply-container'}> \n                {postPrologueContent}\n                <div className='post-view-content'>\n                    <div className='post-view-content-user-profile-picture'>\n                        <img\n                            src={this.props.post.user.profil_picture_src}\n                            alt={this.props.post.user.names}\n                            className='post-view-content-user-profile-picture-image' />\n                        {userProfilPreviewContent}\n                    </div>\n                    <div className='post-view-content-content'>\n                        <div className='post-view-content-content-header'>\n                            <div className='post-view-content-content-header-user-infos'>\n                                <div className='post-view-content-content-header-user-infos-names'>\n                                    {this.props.post.user.names}\n                                </div>\n                                <div className='post-view-content-content-header-user-infos-username'>\n                                    {'@' + this.props.post.user.username}\n                                    {userProfilPreviewContent}\n                                </div>\n                            </div>\n                            {userProfilPreviewContent}\n                            <div className='post-view-content-content-header-post-infos'>\n                                {postLocationContent}\n                                {postAudienceContent}\n                                {postTimeContent}\n                            </div>\n                        </div>\n                        <div className='post-view-content-content-body'>\n                            {postTextContent}\n                            {postPollContent}\n                            {postMediaContent}\n                            {postReplyToContent}   \n                            {actionsBarContent}                         \n                        </div>\n                    </div>\n                </div>\n                {replyContent}\n            </div>\n        );\n    }\n\n}"]},"metadata":{},"sourceType":"module"}